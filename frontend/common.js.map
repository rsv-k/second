{"version":3,"sources":["./src/app/core/resolvers/exchange-resolver.service.ts","./src/app/core/resolvers/order-resolver.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIQ;AACL;AAC0B;;;AAKjE,MAAM,gBAAgB;IAC1B,YAAoB,KAA+B;QAA/B,UAAK,GAAL,KAAK,CAA0B;IAAG,CAAC;IAEvD,OAAO,CAAC,KAA6B;QAClC,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,EAAE,EAAE;YACL,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,wDAAoB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CACxD,0DAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACd,IAAI,CAAC,QAAQ,EAAE;oBACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAChB,iFAAiC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACpD,CAAC;iBACJ;YACJ,CAAC,CAAC,EACF,6DAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAChC,2DAAI,CAAC,CAAC,CAAC,CACT,CAAC;SACJ;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kFAAkC,EAAE,CAAC,CAAC;QAE1D,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,4DAAwB,CAAC,CAAC,IAAI,CACpD,6DAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,EACzC,2DAAI,CAAC,CAAC,CAAC,CACT,CAAC;IACL,CAAC;;gFAzBS,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFd,MAAM;6FAER,gBAAgB;cAH5B,wDAAU;eAAC;gBACT,UAAU,EAAE,MAAM;aACpB;;;;;;;;;;;;;;ACVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIQ;AACL;AACoB;;;AAK3D,MAAM,aAAa;IACvB,YAAoB,KAA+B;QAA/B,UAAK,GAAL,KAAK,CAA0B;IAAG,CAAC;IAEvD,OAAO,CAAC,KAA6B;QAClC,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,EAAE,EAAE;YACL,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,qDAAiB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CACrD,0DAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBACX,IAAI,CAAC,KAAK,EAAE;oBACT,IAAI,CAAC,KAAK,CAAC,QAAQ,CAChB,0EAA0B,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CACjD,CAAC;iBACJ;YACJ,CAAC,CAAC,EACF,6DAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAC1B,2DAAI,CAAC,CAAC,CAAC,CACT,CAAC;SACJ;aAAM;YACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,2EAA2B,EAAE,CAAC,CAAC;YAEnD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,yDAAqB,CAAC,CAAC,IAAI,CACjD,6DAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EACnC,2DAAI,CAAC,CAAC,CAAC,CACT,CAAC;SACJ;IACJ,CAAC;;0EAzBS,aAAa;gGAAb,aAAa,WAAb,aAAa,mBAFX,MAAM;6FAER,aAAa;cAHzB,wDAAU;eAAC;gBACT,UAAU,EAAE,MAAM;aACpB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport * as fromRoot from '../../store/index';\r\nimport * as ExchangeActions from '../../store/actions/exchange.actions';\r\n\r\n@Injectable({\r\n   providedIn: 'root',\r\n})\r\nexport class ExchangeResolver implements Resolve<any> {\r\n   constructor(private store: Store<fromRoot.AppState>) {}\r\n\r\n   resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n      const id = route.paramMap.get('id');\r\n      if (id) {\r\n         return this.store.select(fromRoot.getExchange, { id }).pipe(\r\n            tap((exchange) => {\r\n               if (!exchange) {\r\n                  this.store.dispatch(\r\n                     ExchangeActions.loadExchangeStart({ payload: id })\r\n                  );\r\n               }\r\n            }),\r\n            filter((exchange) => !!exchange),\r\n            take(1)\r\n         );\r\n      }\r\n\r\n      this.store.dispatch(ExchangeActions.loadExchangesStart());\r\n\r\n      return this.store.select(fromRoot.getAllExchanges).pipe(\r\n         filter((exchanges) => !!exchanges.length),\r\n         take(1)\r\n      );\r\n   }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, take, tap } from 'rxjs/operators';\r\nimport * as fromRoot from '../../store/index';\r\nimport * as OrderActions from '../../store/actions/order.actions';\r\n\r\n@Injectable({\r\n   providedIn: 'root',\r\n})\r\nexport class OrderResolver implements Resolve<any> {\r\n   constructor(private store: Store<fromRoot.AppState>) {}\r\n\r\n   resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n      const id = route.paramMap.get('id');\r\n      if (id) {\r\n         return this.store.select(fromRoot.getOrder, { id }).pipe(\r\n            tap((order) => {\r\n               if (!order) {\r\n                  this.store.dispatch(\r\n                     OrderActions.getOrderStart({ payload: { id } })\r\n                  );\r\n               }\r\n            }),\r\n            filter((order) => !!order),\r\n            take(1)\r\n         );\r\n      } else {\r\n         this.store.dispatch(OrderActions.getOrdersStart());\r\n\r\n         return this.store.select(fromRoot.getAllOrders).pipe(\r\n            filter((orders) => !!orders.length),\r\n            take(1)\r\n         );\r\n      }\r\n   }\r\n}\r\n"],"sourceRoot":"webpack:///"}